/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  TokenExchangeRetrieve200,
  TokenObtainPair,
  TokenRefresh,
  TokenRefreshCreate200
} from '.././model';

import { customInstance } from '.././client';
import type { ErrorType , BodyType } from '.././client';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const tokenCreate = (
    tokenObtainPair: BodyType<NonReadonly<TokenObtainPair>>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenObtainPair>(
      {url: `/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPair, signal
    },
      options);
    }
  


export const getTokenCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokenCreate>>, TError,{data: BodyType<NonReadonly<TokenObtainPair>>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof tokenCreate>>, TError,{data: BodyType<NonReadonly<TokenObtainPair>>}, TContext> => {

const mutationKey = ['tokenCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokenCreate>>, {data: BodyType<NonReadonly<TokenObtainPair>>}> = (props) => {
          const {data} = props ?? {};

          return  tokenCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokenCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenCreate>>>
    export type TokenCreateMutationBody = BodyType<NonReadonly<TokenObtainPair>>
    export type TokenCreateMutationError = ErrorType<unknown>

    export const useTokenCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokenCreate>>, TError,{data: BodyType<NonReadonly<TokenObtainPair>>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tokenCreate>>,
        TError,
        {data: BodyType<NonReadonly<TokenObtainPair>>},
        TContext
      > => {

      const mutationOptions = getTokenCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const tokenExchangeRetrieve = (
    code: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenExchangeRetrieve200>(
      {url: `/token/exchange/${code}`, method: 'GET', signal
    },
      options);
    }
  

export const getTokenExchangeRetrieveQueryKey = (code: string,) => {
    return [`/token/exchange/${code}`] as const;
    }

    
export const getTokenExchangeRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError = ErrorType<void>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTokenExchangeRetrieveQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tokenExchangeRetrieve>>> = ({ signal }) => tokenExchangeRetrieve(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TokenExchangeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tokenExchangeRetrieve>>>
export type TokenExchangeRetrieveQueryError = ErrorType<void>


export function useTokenExchangeRetrieve<TData = Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError = ErrorType<void>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tokenExchangeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tokenExchangeRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTokenExchangeRetrieve<TData = Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError = ErrorType<void>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tokenExchangeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tokenExchangeRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTokenExchangeRetrieve<TData = Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError = ErrorType<void>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useTokenExchangeRetrieve<TData = Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError = ErrorType<void>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tokenExchangeRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTokenExchangeRetrieveQueryOptions(code,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const tokenRefreshCreate = (
    refresh: string,
    tokenRefresh: BodyType<NonReadonly<TokenRefresh>>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenRefreshCreate200>(
      {url: `/token/refresh/${refresh}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefresh, signal
    },
      options);
    }
  


export const getTokenRefreshCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError,{refresh: string;data: BodyType<NonReadonly<TokenRefresh>>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError,{refresh: string;data: BodyType<NonReadonly<TokenRefresh>>}, TContext> => {

const mutationKey = ['tokenRefreshCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokenRefreshCreate>>, {refresh: string;data: BodyType<NonReadonly<TokenRefresh>>}> = (props) => {
          const {refresh,data} = props ?? {};

          return  tokenRefreshCreate(refresh,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokenRefreshCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenRefreshCreate>>>
    export type TokenRefreshCreateMutationBody = BodyType<NonReadonly<TokenRefresh>>
    export type TokenRefreshCreateMutationError = ErrorType<void>

    export const useTokenRefreshCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError,{refresh: string;data: BodyType<NonReadonly<TokenRefresh>>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tokenRefreshCreate>>,
        TError,
        {refresh: string;data: BodyType<NonReadonly<TokenRefresh>>},
        TContext
      > => {

      const mutationOptions = getTokenRefreshCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    