/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiExpensesListParams,
  Category,
  Expense,
  Group,
  User
} from '.././model';

import { customInstance } from '.././client';
import type { ErrorType , BodyType } from '.././client';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const apiExpenseRetrieve = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Expense>(
      {url: `/api/expense/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getApiExpenseRetrieveQueryKey = (id: number,) => {
    return [`/api/expense/${id}`] as const;
    }

    
export const getApiExpenseRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiExpenseRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiExpenseRetrieve>>> = ({ signal }) => apiExpenseRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiExpenseRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiExpenseRetrieve>>>
export type ApiExpenseRetrieveQueryError = ErrorType<unknown>


export function useApiExpenseRetrieve<TData = Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiExpenseRetrieve>>,
          TError,
          Awaited<ReturnType<typeof apiExpenseRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiExpenseRetrieve<TData = Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiExpenseRetrieve>>,
          TError,
          Awaited<ReturnType<typeof apiExpenseRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiExpenseRetrieve<TData = Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiExpenseRetrieve<TData = Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpenseRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiExpenseRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiExpenseUpdate = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Expense>(
      {url: `/api/expense/${id}`, method: 'PUT'
    },
      options);
    }
  


export const getApiExpenseUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiExpenseUpdate>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiExpenseUpdate>>, TError,{id: number}, TContext> => {

const mutationKey = ['apiExpenseUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiExpenseUpdate>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  apiExpenseUpdate(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiExpenseUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiExpenseUpdate>>>
    
    export type ApiExpenseUpdateMutationError = ErrorType<unknown>

    export const useApiExpenseUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiExpenseUpdate>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiExpenseUpdate>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getApiExpenseUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiExpenseDestroy = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/expense/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getApiExpenseDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiExpenseDestroy>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiExpenseDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['apiExpenseDestroy'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiExpenseDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  apiExpenseDestroy(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiExpenseDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiExpenseDestroy>>>
    
    export type ApiExpenseDestroyMutationError = ErrorType<unknown>

    export const useApiExpenseDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiExpenseDestroy>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiExpenseDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getApiExpenseDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiExpensesList = (
    params: ApiExpensesListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Expense[]>(
      {url: `/api/expenses`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getApiExpensesListQueryKey = (params: ApiExpensesListParams,) => {
    return [`/api/expenses`, ...(params ? [params]: [])] as const;
    }

    
export const getApiExpensesListQueryOptions = <TData = Awaited<ReturnType<typeof apiExpensesList>>, TError = ErrorType<unknown>>(params: ApiExpensesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpensesList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiExpensesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiExpensesList>>> = ({ signal }) => apiExpensesList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiExpensesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiExpensesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiExpensesList>>>
export type ApiExpensesListQueryError = ErrorType<unknown>


export function useApiExpensesList<TData = Awaited<ReturnType<typeof apiExpensesList>>, TError = ErrorType<unknown>>(
 params: ApiExpensesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpensesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiExpensesList>>,
          TError,
          Awaited<ReturnType<typeof apiExpensesList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiExpensesList<TData = Awaited<ReturnType<typeof apiExpensesList>>, TError = ErrorType<unknown>>(
 params: ApiExpensesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpensesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiExpensesList>>,
          TError,
          Awaited<ReturnType<typeof apiExpensesList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiExpensesList<TData = Awaited<ReturnType<typeof apiExpensesList>>, TError = ErrorType<unknown>>(
 params: ApiExpensesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpensesList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiExpensesList<TData = Awaited<ReturnType<typeof apiExpensesList>>, TError = ErrorType<unknown>>(
 params: ApiExpensesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiExpensesList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiExpensesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiExpensesCreate = (
    expense: BodyType<NonReadonly<Expense>>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Expense[]>(
      {url: `/api/expenses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: expense, signal
    },
      options);
    }
  


export const getApiExpensesCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiExpensesCreate>>, TError,{data: BodyType<NonReadonly<Expense>>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiExpensesCreate>>, TError,{data: BodyType<NonReadonly<Expense>>}, TContext> => {

const mutationKey = ['apiExpensesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiExpensesCreate>>, {data: BodyType<NonReadonly<Expense>>}> = (props) => {
          const {data} = props ?? {};

          return  apiExpensesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiExpensesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiExpensesCreate>>>
    export type ApiExpensesCreateMutationBody = BodyType<NonReadonly<Expense>>
    export type ApiExpensesCreateMutationError = ErrorType<unknown>

    export const useApiExpensesCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiExpensesCreate>>, TError,{data: BodyType<NonReadonly<Expense>>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiExpensesCreate>>,
        TError,
        {data: BodyType<NonReadonly<Expense>>},
        TContext
      > => {

      const mutationOptions = getApiExpensesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiGroupCategoriesList = (
    groupName: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Category[]>(
      {url: `/api/group/${groupName}/categories`, method: 'GET', signal
    },
      options);
    }
  

export const getApiGroupCategoriesListQueryKey = (groupName: string,) => {
    return [`/api/group/${groupName}/categories`] as const;
    }

    
export const getApiGroupCategoriesListQueryOptions = <TData = Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError = ErrorType<unknown>>(groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGroupCategoriesListQueryKey(groupName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGroupCategoriesList>>> = ({ signal }) => apiGroupCategoriesList(groupName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGroupCategoriesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiGroupCategoriesList>>>
export type ApiGroupCategoriesListQueryError = ErrorType<unknown>


export function useApiGroupCategoriesList<TData = Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError = ErrorType<unknown>>(
 groupName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupCategoriesList>>,
          TError,
          Awaited<ReturnType<typeof apiGroupCategoriesList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupCategoriesList<TData = Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError = ErrorType<unknown>>(
 groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupCategoriesList>>,
          TError,
          Awaited<ReturnType<typeof apiGroupCategoriesList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupCategoriesList<TData = Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError = ErrorType<unknown>>(
 groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiGroupCategoriesList<TData = Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError = ErrorType<unknown>>(
 groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupCategoriesList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGroupCategoriesListQueryOptions(groupName,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiGroupCategoriesCreate = (
    groupName: string,
    category: BodyType<NonReadonly<Category>>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Category[]>(
      {url: `/api/group/${groupName}/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: category, signal
    },
      options);
    }
  


export const getApiGroupCategoriesCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupCategoriesCreate>>, TError,{groupName: string;data: BodyType<NonReadonly<Category>>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiGroupCategoriesCreate>>, TError,{groupName: string;data: BodyType<NonReadonly<Category>>}, TContext> => {

const mutationKey = ['apiGroupCategoriesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiGroupCategoriesCreate>>, {groupName: string;data: BodyType<NonReadonly<Category>>}> = (props) => {
          const {groupName,data} = props ?? {};

          return  apiGroupCategoriesCreate(groupName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiGroupCategoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiGroupCategoriesCreate>>>
    export type ApiGroupCategoriesCreateMutationBody = BodyType<NonReadonly<Category>>
    export type ApiGroupCategoriesCreateMutationError = ErrorType<unknown>

    export const useApiGroupCategoriesCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupCategoriesCreate>>, TError,{groupName: string;data: BodyType<NonReadonly<Category>>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiGroupCategoriesCreate>>,
        TError,
        {groupName: string;data: BodyType<NonReadonly<Category>>},
        TContext
      > => {

      const mutationOptions = getApiGroupCategoriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiGroupUsersList = (
    groupName: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User[]>(
      {url: `/api/group/${groupName}/users`, method: 'GET', signal
    },
      options);
    }
  

export const getApiGroupUsersListQueryKey = (groupName: string,) => {
    return [`/api/group/${groupName}/users`] as const;
    }

    
export const getApiGroupUsersListQueryOptions = <TData = Awaited<ReturnType<typeof apiGroupUsersList>>, TError = ErrorType<unknown>>(groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupUsersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGroupUsersListQueryKey(groupName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGroupUsersList>>> = ({ signal }) => apiGroupUsersList(groupName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGroupUsersList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGroupUsersListQueryResult = NonNullable<Awaited<ReturnType<typeof apiGroupUsersList>>>
export type ApiGroupUsersListQueryError = ErrorType<unknown>


export function useApiGroupUsersList<TData = Awaited<ReturnType<typeof apiGroupUsersList>>, TError = ErrorType<unknown>>(
 groupName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupUsersList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupUsersList>>,
          TError,
          Awaited<ReturnType<typeof apiGroupUsersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupUsersList<TData = Awaited<ReturnType<typeof apiGroupUsersList>>, TError = ErrorType<unknown>>(
 groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupUsersList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupUsersList>>,
          TError,
          Awaited<ReturnType<typeof apiGroupUsersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupUsersList<TData = Awaited<ReturnType<typeof apiGroupUsersList>>, TError = ErrorType<unknown>>(
 groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupUsersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiGroupUsersList<TData = Awaited<ReturnType<typeof apiGroupUsersList>>, TError = ErrorType<unknown>>(
 groupName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupUsersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGroupUsersListQueryOptions(groupName,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiGroupRetrieve = (
    name: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Group>(
      {url: `/api/group/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getApiGroupRetrieveQueryKey = (name: string,) => {
    return [`/api/group/${name}`] as const;
    }

    
export const getApiGroupRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof apiGroupRetrieve>>, TError = ErrorType<unknown>>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGroupRetrieveQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGroupRetrieve>>> = ({ signal }) => apiGroupRetrieve(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGroupRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGroupRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiGroupRetrieve>>>
export type ApiGroupRetrieveQueryError = ErrorType<unknown>


export function useApiGroupRetrieve<TData = Awaited<ReturnType<typeof apiGroupRetrieve>>, TError = ErrorType<unknown>>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupRetrieve>>,
          TError,
          Awaited<ReturnType<typeof apiGroupRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupRetrieve<TData = Awaited<ReturnType<typeof apiGroupRetrieve>>, TError = ErrorType<unknown>>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupRetrieve>>,
          TError,
          Awaited<ReturnType<typeof apiGroupRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupRetrieve<TData = Awaited<ReturnType<typeof apiGroupRetrieve>>, TError = ErrorType<unknown>>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiGroupRetrieve<TData = Awaited<ReturnType<typeof apiGroupRetrieve>>, TError = ErrorType<unknown>>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGroupRetrieveQueryOptions(name,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiGroupUpdate = (
    name: string,
    group: BodyType<NonReadonly<Group>>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Group>(
      {url: `/api/group/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: group
    },
      options);
    }
  


export const getApiGroupUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupUpdate>>, TError,{name: string;data: BodyType<NonReadonly<Group>>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiGroupUpdate>>, TError,{name: string;data: BodyType<NonReadonly<Group>>}, TContext> => {

const mutationKey = ['apiGroupUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiGroupUpdate>>, {name: string;data: BodyType<NonReadonly<Group>>}> = (props) => {
          const {name,data} = props ?? {};

          return  apiGroupUpdate(name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiGroupUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiGroupUpdate>>>
    export type ApiGroupUpdateMutationBody = BodyType<NonReadonly<Group>>
    export type ApiGroupUpdateMutationError = ErrorType<unknown>

    export const useApiGroupUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupUpdate>>, TError,{name: string;data: BodyType<NonReadonly<Group>>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiGroupUpdate>>,
        TError,
        {name: string;data: BodyType<NonReadonly<Group>>},
        TContext
      > => {

      const mutationOptions = getApiGroupUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiGroupDestroy = (
    name: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/group/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getApiGroupDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupDestroy>>, TError,{name: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiGroupDestroy>>, TError,{name: string}, TContext> => {

const mutationKey = ['apiGroupDestroy'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiGroupDestroy>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  apiGroupDestroy(name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiGroupDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiGroupDestroy>>>
    
    export type ApiGroupDestroyMutationError = ErrorType<unknown>

    export const useApiGroupDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupDestroy>>, TError,{name: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiGroupDestroy>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getApiGroupDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiGroupsList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Group[]>(
      {url: `/api/groups`, method: 'GET', signal
    },
      options);
    }
  

export const getApiGroupsListQueryKey = () => {
    return [`/api/groups`] as const;
    }

    
export const getApiGroupsListQueryOptions = <TData = Awaited<ReturnType<typeof apiGroupsList>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupsList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGroupsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGroupsList>>> = ({ signal }) => apiGroupsList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGroupsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGroupsListQueryResult = NonNullable<Awaited<ReturnType<typeof apiGroupsList>>>
export type ApiGroupsListQueryError = ErrorType<unknown>


export function useApiGroupsList<TData = Awaited<ReturnType<typeof apiGroupsList>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupsList>>,
          TError,
          Awaited<ReturnType<typeof apiGroupsList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupsList<TData = Awaited<ReturnType<typeof apiGroupsList>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGroupsList>>,
          TError,
          Awaited<ReturnType<typeof apiGroupsList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGroupsList<TData = Awaited<ReturnType<typeof apiGroupsList>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupsList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiGroupsList<TData = Awaited<ReturnType<typeof apiGroupsList>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGroupsList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGroupsListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiGroupsCreate = (
    group: BodyType<NonReadonly<Group>>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Group[]>(
      {url: `/api/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: group, signal
    },
      options);
    }
  


export const getApiGroupsCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupsCreate>>, TError,{data: BodyType<NonReadonly<Group>>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiGroupsCreate>>, TError,{data: BodyType<NonReadonly<Group>>}, TContext> => {

const mutationKey = ['apiGroupsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiGroupsCreate>>, {data: BodyType<NonReadonly<Group>>}> = (props) => {
          const {data} = props ?? {};

          return  apiGroupsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiGroupsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiGroupsCreate>>>
    export type ApiGroupsCreateMutationBody = BodyType<NonReadonly<Group>>
    export type ApiGroupsCreateMutationError = ErrorType<unknown>

    export const useApiGroupsCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiGroupsCreate>>, TError,{data: BodyType<NonReadonly<Group>>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiGroupsCreate>>,
        TError,
        {data: BodyType<NonReadonly<Group>>},
        TContext
      > => {

      const mutationOptions = getApiGroupsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    